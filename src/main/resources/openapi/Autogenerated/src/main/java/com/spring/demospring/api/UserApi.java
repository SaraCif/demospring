/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.spring.demospring.api;

import org.openapitools.model.ResponseModel;
import org.openapitools.model.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-02-19T18:02:28.634+01:00[Europe/Berlin]")
@Validated
@Tag(name = "user", description = "the user API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /user : Create user
     *
     * @param user  (required)
     * @return response (status code 200)
     *         or error response (status code 400)
     */
    @Operation(
        operationId = "createUser",
        summary = "Create user",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ResponseModel.class))),
            @ApiResponse(responseCode = "400", description = "error response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ResponseModel.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ResponseModel> createUser(
        @Parameter(name = "User", description = "", required = true, schema = @Schema(description = "")) @Valid @RequestBody User user
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /user/{id} : Delete user
     *
     * @param id The name that needs to be deleted (required)
     * @return response (status code 200)
     *         or error response (status code 400)
     *         or error response (status code 404)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "Delete user",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ResponseModel.class))),
            @ApiResponse(responseCode = "400", description = "error response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ResponseModel.class))),
            @ApiResponse(responseCode = "404", description = "error response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ResponseModel.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<ResponseModel> deleteUser(
        @Parameter(name = "id", description = "The name that needs to be deleted", required = true, schema = @Schema(description = "")) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{id} : Get user by id
     *
     * @param id The name that needs to be fetched (required)
     * @return successful operation (status code 200)
     *         or error response (status code 400)
     *         or error response (status code 404)
     */
    @Operation(
        operationId = "getUserById",
        summary = "Get user by id",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  User.class))),
            @ApiResponse(responseCode = "400", description = "error response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ResponseModel.class))),
            @ApiResponse(responseCode = "404", description = "error response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ResponseModel.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<User> getUserById(
        @Parameter(name = "id", description = "The name that needs to be fetched", required = true, schema = @Schema(description = "")) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"password\" : \"password\", \"address\" : \"address\", \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0, \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /user/{id} : Updated user
     *
     * @param id name that need to be updated (required)
     * @param user  (required)
     * @return response (status code 200)
     *         or error response (status code 400)
     *         or error response (status code 404)
     */
    @Operation(
        operationId = "updateUser",
        summary = "Updated user",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ResponseModel.class))),
            @ApiResponse(responseCode = "400", description = "error response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ResponseModel.class))),
            @ApiResponse(responseCode = "404", description = "error response", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ResponseModel.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/user/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ResponseModel> updateUser(
        @Parameter(name = "id", description = "name that need to be updated", required = true, schema = @Schema(description = "")) @PathVariable("id") String id,
        @Parameter(name = "User", description = "", required = true, schema = @Schema(description = "")) @Valid @RequestBody User user
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
