openapi: "3.0.0"
info:
  description: "Demo Spring"
  version: "1.0.0"
  title: "Swagger Demo Spring"
  contact:
    email: "sara.cifola@gmail.com"
tags:
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
paths:
  /searchUser:
    get:
      tags:
      - "user"
      summary: "Get user by parameters"
      description: ""
      operationId: "getUser"
      parameters:
      - name: "name"
        in: "query"
        description: "The name that needs to be fetched. Use user1 for testing. "
        schema:
          type: "string"
      - name: "surname"
        in: "query"
        description: "The surname that needs to be fetched. Use user1 for testing. "
        schema:
          type: "string"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Users"
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      operationId: "createUser"
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          $ref: "#/components/responses/GeneralResponse"
        "400":
          $ref: "#/components/responses/ErrorResponse"
  /user/{id}:
    get:
      tags:
      - "user"
      summary: "Get user by id"
      description: ""
      operationId: "getUserByName"
      parameters:
      - name: "id"
        in: "path"
        description: "The name that needs to be fetched"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
    put:
      tags:
      - "user"
      summary: "Updated user"
      operationId: "updateUser"
      parameters:
      - name: "id"
        in: "path"
        description: "name that need to be updated"
        required: true
        schema:
          type: "string"
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          $ref: "#/components/responses/GeneralResponse"
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      operationId: "deleteUser"
      parameters:
      - name: "id"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          $ref: "#/components/responses/GeneralResponse"
        "400":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
components:
  schemas:
    ResponseModel:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Users:
        type: array
        items: 
          $ref: "#/components/schemas/User"
    User:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        surname:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        address:
          type: "string"
  responses: 
    GeneralResponse:
      description: response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseModel"
    ErrorResponse:
      description: error response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseModel"