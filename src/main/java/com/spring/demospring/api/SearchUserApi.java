/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.spring.demospring.api;

import java.util.Optional;

import javax.annotation.Generated;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import com.spring.demospring.dto.ResponseModel;
import com.spring.demospring.dto.UserModel;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-02-19T18:02:28.634+01:00[Europe/Berlin]")
@Validated
@Api(value = "searchUser", description = "the searchUser API")
public interface SearchUserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /searchUser : Get user by parameters
     *
     * @param name The name that needs to be fetched. Use user1 for testing.  (optional)
     * @param surname The surname that needs to be fetched. Use user1 for testing.  (optional)
     * @return successful operation (status code 200)
     *         or error response (status code 400)
     *         or error response (status code 404)
     */
    @ApiOperation(
        value = "searchUser",
        notes = "Get user by parameters",
        tags = { "user" }
   )
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = UserModel.class),
            @ApiResponse(code = 400, message = "error response", response =  ResponseModel.class),
            @ApiResponse(code = 404, message = "error response", response =  ResponseModel.class)
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/searchUser",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<?> searchUser(
        @ApiParam(value = "name", required = false) String name,
        @ApiParam(value = "surname", required = false) String surname
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"password\" : \"password\", \"address\" : \"address\", \"surname\" : \"surname\", \"name\" : \"name\", \"id\" : 0, \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
